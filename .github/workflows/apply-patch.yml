name: Apply Chat Patch

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  run:
    if: contains(github.event.comment.body, '/apply-patch')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Auth GitHub App (utilise les secrets déjà en place)
      - name: Auth as GitHub App
        uses: tibdex/github-app-token@v2
        id: app
        with:
          app_id: ${{ secrets.APP_ID }}
          installation_id: ${{ secrets.APP_INSTALLATION_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Extract patch blocks from comment
        id: extract
        run: |
          python3 - <<'PY'
          import os, re, sys, pathlib
          body = os.environ["BODY"]

          # Récupère TOUS les blocs ```patch ... ```
          blocks = re.findall(r"```patch\s*\n(.*?)\n```", body, flags=re.S|re.I)
          if not blocks:
            print("::error::No ```patch``` code block found in the comment.")
            sys.exit(1)

          patch_path = pathlib.Path("/tmp/changes.patch")
          content = "\n\n".join(b.strip() for b in blocks)
          patch_path.write_text(content, encoding="utf-8")
          print(f"Patch written to {patch_path}")
          PY
        env:
          BODY: ${{ github.event.comment.body }}

      - name: Show patch (for logs)
        run: |
          echo "------ PATCH START ------"
          sed -n '1,200p' /tmp/changes.patch || true
          echo "------- PATCH END -------"

      - name: Check patch applies cleanly
        shell: bash
        run: |
          set -e
          if ! git apply --check /tmp/changes.patch; then
            echo "::error::Patch does not apply cleanly. Ensure it's a valid unified git diff (starts with 'diff --git')."
            exit 1
          fi

      - name: Apply patch
        run: |
          git apply --index /tmp/changes.patch

      - name: Create branch and commit
        env:
          GH_TOKEN: ${{ steps.app.outputs.token }}
        run: |
          set -e
          BR="chat-update-${GITHUB_RUN_ID}"
          git checkout -b "$BR"
          git config user.name "chat-bot"
          git config user.email "bot@example.com"
          git commit -m "Apply chat patch from comment"
          git push "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "$BR"

      - name: Open PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
            const branch = `chat-update-${process.env.GITHUB_RUN_ID}`;
            await github.rest.pulls.create({
              owner, repo,
              head: branch,
              base: "main",
              title: "Chat patch",
              body: "Patch appliqué automatiquement depuis un commentaire contenant ```patch```."
            });
